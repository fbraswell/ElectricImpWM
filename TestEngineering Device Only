// server.log("-- Start program --");

// Pump mode or transducer mode
// Pump mode reads Modbus
const NOT_CONFIGURED = -1;
const PUMP_MODE = 1;
const TRANSDUCER_MODE = 0;

// Voltage regulator control & constants
const REGULATOR_ON = 0x01;
const REGULATOR_OFF = 0x00; // DEBUG - allows regulators to be turned on/off
const REGULATOR_OFF = 0x01; // DEBUG - use this to turn on all regulators
const REGULATOR_DELAY = 0.05; // wait for sensor to power up

mode <- PUMP_MODE;
mode <- TRANSDUCER_MODE; // DEBUG - comment to enable PUMP_MODE

// ID 20000c2a69022926 is the Test Module
ID <- hardware.getdeviceid();
if ( ID == "20000c2a69022926")
{
    server.log("---*** START-UP ***--- Found 926 Test Controller ---*** START-UP ***--- ")
} else
{
    server.log("---*** START-UP ***--- Device under Test ---*** START-UP ***--- ");
}

// called when bytes are received on RS-232
// Function triggered by receipt of a byte from the connected computer
// Adds the input byte as an alphanumeric character to a buffer string
// which is displayed in the log when the remote user hits Enter
input_string_232 <- ""; // initialize string
function rs232_readback()
{
    local byte = rs232.read();
        // ignore initial input
    if (byte == -1) return;
    if (byte == 13)
    {   // handle receipt of CR
        // Output string and reset input_string for next set of chars
        server.log("-Received 232: "+input_string_232);
        input_string_232 = ""; // reset string
    } else
    {
        // add input character to input_string buffer
        input_string_232 = input_string_232 + chr(byte);
    }
}   // function rs232_readback()

input_string_485 <- ""; // initialize string
function rs485_readback()
{
    local byte = rs485.read();
        // ignore initial input
    if (byte == -1) return;
    if (byte == 13)
    {   // handle receipt of CR
        // Output string and reset input_string for next set of chars
        server.log("-Received 485: "+input_string_485);
        input_string_485 = ""; // reset string
    } else
    {
        // add input character to input_string buffer
        input_string_485 = input_string_485 + chr(byte);
    }
}   // function rs485_readback()
// receive individual characters from RS-232
function chr(ascii_value)
{
    // convert passed integer value ASCII code
    // into a character string
    if (ascii_value < 32) return "";
    return format("%c", ascii_value);
} // function chr(ascii_value)

// Serial RS-232 on pins 6, E
rs232 <- hardware.uart6E;
rs232.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, rs232_readback);

// Modbus RS-485 on pins 8, 9
rs485 <- hardware.uart1289;
rs485.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, rs485_readback);

const rs485write = 1;
const rs485read = 0;

rs485_dir <- hardware.pin2;
rs485_dir.configure(DIGITAL_OUT);

// Servo set-up and control
// These values may be different for your servo
const SERVO_MIN = 0.027;
const SERVO_MAX = 0.1235;

const PERIOD = 4.0; // cycle period in sec

// Steps run from 0 to 1.0
const STEPS = 10;

// Below are channels for Test Module
// create global variable for servo and configure
// Configure port for PWM - pulse width modulation
// to control the servo
servo <- hardware.pinC;
servo.configure(PWM_OUT, 0.02, SERVO_MIN);

// Imp002 pins - works either side
HW_Temp002 <- hardware.pinA; // temp sensor voltage on pin2 and on IMP002 pinA
HW_Temp002.configure(ANALOG_IN);
analog2In <- hardware.pinB; // second analog channel on IMP002 pinB
analog2In.configure(ANALOG_IN);
hall2 <- hardware.pinD;    // second Hall switch
hall2.configure(DIGITAL_IN);

if ( ID == "20000c2a69022926")
{
// Test Module channels only
    analog1out <- hardware.pin1;
    analog1out.configure(ANALOG_OUT);

    analog2out <- hardware.pin5;
    analog2out.configure(ANALOG_OUT);
} else
{
// Below are channels for Device Under Test DUT
    
    // common to both modes
    HW_RegulatorCntl <- hardware.pin5; // regulator on/off
    HW_RegulatorCntl.configure(DIGITAL_OUT);
    analog1In <- hardware.pin7; // Analog channel 1 input
    analog1In.configure(ANALOG_IN);

// mode <- PUMP_MODE;
// mode <- TRANSDUCER_MODE;
    if (mode == PUMP_MODE)
    {
// Pump with Modbus Mode 
        hall1 <- hardware.pin1;
        hall1.configure(DIGITAL_IN);
    } else
    {
// Transducer only mode        
        HW_Switch1 <- hardware.pin1;
        HW_Switch1.configure(DIGITAL_IN);
        HW_Switch2 <- hardware.pin2;
        HW_Switch2.configure(DIGITAL_IN);
        HW_Temp <- hardware.pin8; // temp sensor voltage
        HW_Temp.configure(ANALOG_IN);
        HW_BatV <- hardware.pin9; // battery voltage to Imp board
        HW_BatV.configure(ANALOG_IN);
    }
}

// SetServo expects a value between 0.0 and 1.0
function SetServo(value) 
{
  local scaledValue = value * (SERVO_MAX-SERVO_MIN) + SERVO_MIN;
  servo.write(scaledValue);
}
 
// expects a value between -80.0 and 80.0
function SetServoDegrees(value) 
{
  local scaledValue = (value + 81) / 161.0 * (SERVO_MAX-SERVO_MIN) + SERVO_MIN;
  servo.write(scaledValue);
}

function rs232_send(str)
{
    foreach(chr in str)
    {
      rs232.write(chr);
    }
    rs232.write(13);
} // function rs232_send(str)

function rs485_send(str)
{
    rs485_dir.write(rs485write);
    foreach(chr in str)
    {
      rs485.write(chr);
    }
    rs485.write(13);
    imp.sleep( (str.len() * 1.1) / 1000.0 );
    rs485_dir.write(rs485read);
} // function rs485_send(str)

// Fetch data from both analog channels on
// the DUT
function getAnalog()
{
//    const REGULATOR_ON = 0x01;
//    const REGULATOR_OFF = 0x00;
    // turn on regulator
    HW_RegulatorCntl.write(REGULATOR_ON);
    imp.sleep(REGULATOR_DELAY); // Wait for regulator voltage to come up
    // get analog1
//    local ana1;
    local ana1 = analog1In.read();
    local ana1V = (hardware.voltage()/4096.0) * (ana1/16.0);
    // get analog2
//    local ana2;
    local ana2 = analog2In.read();
    local ana2V = (hardware.voltage()/4096.0) * (ana2/16.0);
    
    // get HW_Temp002
//    local tmp2;
    local tmp2 = HW_Temp002.read();
    local tempC = ((tmp2 * 0.00005035)-0.5)*100.0;                                                                                                           
    local tempF = (9.0/5.0)*tempC + 32.0;
    // get Hall2
    local h2;
    h2 = hall2.read();
    
    // send info to log
    server.log(format("DUT ++ Analog ch1: %d, %.2fV; Analog ch2: %d, %.2fV; temp2: %d, %.2fF, %.2fC; Hall2: %d", 
                ana1, ana1V, ana2, ana2V, tmp2, tempF, tempC, h2));
    // send info back to test module via RS232
    rs232_send(format("DUT ++ Analog ch1: %d, %.2fV; Analog ch2: %d, %.2fV; temp2: %d, %.2fF, %.2fC; Hall2: %d", 
                ana1, ana1V, ana2, ana2V, tmp2, tempF, tempC, h2));
//    rs232_send(format("DUT ++ Analog ch1: %d, %.2fV", 
//                ana1, ana1V));
//    server.log(format("+# Temp002 F: %5.2f; Temp C: %5.2f", tempF, tempC));
//    rs232_send(format("+# Temp002 F: %5.2f; Temp C: %5.2f", tempF, tempC));
                
    // mode <- PUMP_MODE;
    // mode <- TRANSDUCER_MODE;
    if (mode == PUMP_MODE)
    {
// Pump with Modbus Mode 
//        local h1;
        local h1 = hall1.read();
        // send info to log for h2, pump mode
        server.log(format("DUT += Pump Mode - Hall1: %d", h1));
        rs232_send(format("DUT += Pump Mode - Hall1: %d", h1));
    } else
    {
// Transducer only mode        
//        local sw1;
        local sw1 = HW_Switch1.read();
//        local sw2;
        local sw2 = HW_Switch2.read(); 
        
//        local tmp1;
        local tmp1 = HW_Temp.read(); // 0 - 65535 
        
        local tempC = ((tmp1 * 0.00005035)-0.5)*100.0;                                                                                                           
        local tempF = (9.0/5.0)*tempC + 32.0;
        
//        local bat;
        local bat = HW_BatV.read();
        
        // R1 = 357k and R2 = 96.7k (actual measurements)
        // Vbat = V (R1 + R2)/R2    // from the voltage divider
        // need to measure resistors for accuracy
        //   local vbat = volts * (323.6 + 100.0)/100.0;
        // measured ratio of 4.59
        //local vbat = volts * 4.59;
    
        local batV = ((hardware.voltage()/4096.0) * (bat/16.0)) * 4.59;
        // send info to log for transducer mode
        server.log(format("DUT +* Transducer Mode (no RS485) - Sw1: %d; SW2: %d; Temp1: %d, %.2fF, %.2fC; Battery: %d, %.2fV", 
                            sw1, sw2, tmp1, tempF, tempC, bat, batV));
        rs232_send(format("DUT +* Transducer Mode (no RS485) - Sw1: %d; SW2: %d; Temp1: %d, %.2fF, %.2fC; Battery: %d, %.2fV", 
                            sw1, sw2, tmp1, tempF, tempC, bat, batV));
        
//        rs232_send(format("+* Transducer Mode - Sw1: %d; SW2: %d; Temp1: %d; Battery: %d", sw1, sw2, tmp1, bat));
//        server.log(format("+# Temp F: %5.2f; Temp C: %5.2f", tempF, tempC));
//        rs232_send(format("+# Temp F: %5.2f; Temp C: %5.2f", tempF, tempC));
    }
    
    // turn off regulator
    HW_RegulatorCntl.write(REGULATOR_OFF);
} // function getAnalog()

// Hardware set-up
            // UART connection to RS-232 channel
            // Pin 6 and Pin E are used for Write & Read
            // readback function called for incoming bytes
// rs232.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, rs232_readback);
// rs485.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, rs485_readback);

            // Pin 2 control direction of RS-485 Read or Write
//        HW_ModBusDir.configure(DIGITAL_OUT);
// rs485_dir.write(rs485read); // default to read
const fmt1 = "~~~~~~~~~~~~~ TEST BOX Count: %d; Position: %5.3f; Mem Free: %d ~~~~~~~~~~~~~ ";
bootCount <- 0; // count sweeps
position <- 0.0; // current position

function Sweep() 
{
    bootCount++; 
    
//    rs485_dir.write(rs485write);
/*
    foreach(chr in "rs485 string")
    {
        rs485.write(chr);
    }
    rs485.write(13);
*/
    rs485_send("TEST BOX - rs485 boot count: "+bootCount);
//     rs485_dir.write(rs485read);
    
  // write analog signal values
  analog1out.write(position);
  analog2out.write(1.0 - position);
 // switch1out.write(position>0.5?1:0);
  // write the servo position
  SetServo(position);
  if(position > 1.0) position = 0.0;
  // increment the position
  position = position + (1.0/STEPS);
//  rs485.write(97);
//  rs232.write(format("rs232 %d", bootCount));
/*
  foreach(chr in "rs232 string")
  {
      rs232.write(chr);
  }
  rs232.write(13);
 */
  rs232_send("TEST BOX - rs232 boot count: "+bootCount);
//  rs485_dir.write(rs485read);
  server.log(format(fmt1, bootCount, position, imp.getmemoryfree()));
  imp.wakeup(PERIOD, Sweep);
} // function Sweep() 

function SerialTest() // DUT
{
        bootCount++; 
    server.log(format("~~~~~~~~~~~~~ DUT DEVICE UNDER TEST - Count: %d; Mem Free: %d ~~~~~~~~~~~~~ ", bootCount, imp.getmemoryfree()));
//    rs485_dir.write(rs485read);
    rs485_send("DUT - rs485 boot count: "+bootCount);
    rs232_send("DUT - rs232 boot count: "+bootCount);
    
//    server.log(format(">ana1 %d; ana2 %d; hall2 %d; temp2 %d", 
//    analog1In.read(), analog2In.read(),
//    hall2.read(), HW_Temp002.read()));
    getAnalog(); // Get the analog channels
    
    imp.wakeup(PERIOD, SerialTest);
} // function SerialTest()

if ( ID == "20000c2a69022926")
{
    Sweep();
} else
{
    SerialTest();
}

